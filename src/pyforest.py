from random import random,randint,choice
from copy import deepcopy
from math import log
from pytree import *

class pyforest:
    """
    Wrapper for a collection or population of trees. Keeps track of meta-params
    as well as defines helpers used to generate random forests, cull, evolve, 
    etc.
    
    The parameters are all 'meta' versions of the parameters required by 
    random_tree: That is they specify a list of possible values for these 
    parameters, rather then a value itself. Accordingly, all of the above 
    params are lists, except for numtrees, which is just the number of trees 
    for this forest, and param_func which is actually a function that returns
    a parameter list in any manner necessary. 
    """
    def __init__(self, maxdepth, func_list, numparams, pr_func, pr_param, const_funcs, numtrees, param_func):
	"""
	Initialize this forest with the meta-parameters used to generate
	random trees.
	"""
	self.maxdepth = maxdepth
	self.func_list = func_list
	self.numparams = numparams
	self.pr_func = pr_func
	self.pr_param = pr_param
	self.const_funcs = const_funcs
	self.numtrees = numtrees
	self.param_func = param_func
	self.forest = self.random_forest()
	self.treeparams = self.generate_params()
    
    def random_forest(self):
	"""
	Generates a forest of randomly generated trees. 
	"""
	forest = [tree(choice(self.numparams),
	               self.func_list, 
                      choice(self.maxdepth),
                      choice(self.pr_func),
                      choice(self.pr_param),
                      choice(self.const_funcs)) 
	          for i in range(self.numtrees)]
	return forest
    
    def generate_params(self):
	"""
	Generates a list of parameter sets, each of cardinality n, 
	where n is the number of params of the set's corresponding tree.
	"""
	return [self._generate_params(tree.num_params) for tree in self.forest]
    
    def _generate_params(self, n=1):
	"""
	Returns a list of n parameters, each one generated by the param_func.
	"""
	return [self.param_func() for i in range(n)]
    
    def evaluate_forest(self):
	"""
	Returns a list of the results for each tree in the forest based on
	its respective list of parameters.
	"""
	return [tree.evaluate(paramlist) for tree,paramlist 
	        in zip(self.forest,self.treeparams)]
	    
    
    def print_to_string(self):
	for tree, paramlist in zip(self.forest,self.treeparams):
	    tree.print_to_string(paramlist)